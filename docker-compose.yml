version: '3.8'

services:
  # Frontend Next.js dengan static IP
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: nextjs-frontend
    restart: unless-stopped
    ports:
      - "192.168.10.1:3000:3000"  # Bind ke IP spesifik
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://192.168.10.2/api
    networks:
      custom_net:
        ipv4_address: 192.168.10.10  # IP internal container
    depends_on:
      - backend

  # Backend Express dengan static IP
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: express-backend
    restart: unless-stopped
    ports:
      - "192.168.10.2:4000:4000"  # Bind ke IP spesifik
    environment:
      - NODE_ENV=production
      - DB_HOST=mysql
      - DB_USER=root
      - DB_PASSWORD=
      - DB_NAME=optipredict_database
    networks:
      custom_net:
        ipv4_address: 192.168.10.11  # IP internal container
    depends_on:
      - mysql
      - python-ml

  # Python ML Service dengan static IP
  python-ml:
    build:
      context: ./backend/python
      dockerfile: Dockerfile
    container_name: python-ml
    restart: unless-stopped
    ports:
      - "192.168.10.3:5000:5000"  # Bind ke IP spesifik
    environment:
      - FLASK_ENV=production
      - DB_HOST=mysql
      - DB_USER=root
      - DB_PASSWORD=
      - DB_NAME=optipredict_database
    networks:
      custom_net:
        ipv4_address: 192.168.10.12  # IP internal container
    depends_on:
      - mysql

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: mysql-db
    restart: unless-stopped
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
      MYSQL_DATABASE: optipredict_database
    ports:
      - "192.168.10.4:3306:3306"  # Bind ke IP spesifik
    volumes:
      - mysql_data:/var/lib/mysql
      - ./db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      custom_net:
        ipv4_address: 192.168.10.13  # IP internal container
    command: --default-authentication-plugin=mysql_native_password

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: nginx-proxy
    restart: unless-stopped
    ports:
      - "192.168.10.5:80:80"      # Bind ke IP spesifik
      - "192.168.10.5:443:443"    # Bind ke IP spesifik
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    networks:
      custom_net:
        ipv4_address: 192.168.10.14  # IP internal container
    depends_on:
      - frontend
      - backend

networks:
  custom_net:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.10.0/24
          gateway: 192.168.10.1

volumes:
  mysql_data:
